/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cit260.mehmurray.jframes;

import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import meh.murray.Options;

/**
 *
 * @author PATRICKS
 */
public class OptionsFrame extends javax.swing.JFrame  {

    public int getTilePairs() {
        return tilePairs;
    }

    public boolean isSoundEnabled() {
        return soundEnabled;
    }

    public boolean isTimerEnabled() {
        return timerEnabled;
    }

    public JCheckBox getJcbScoreEnabled() {
        return jcbScoreEnabled;
    }

    public JCheckBox getJcbSoundEnabled() {
        return jcbSoundEnabled;
    }

    public JCheckBox getJcbTimerEnabled() {
        return jcbTimerEnabled;
    }

    public JLabel getJlMatchPairs() {
        return jlMatchPairs;
    }

    public JPanel getJpOptionsMenu() {
        return jpOptionsMenu;
    }

    public JSlider getJslideMatchPairs() {
        return jslideMatchPairs;
    }

    public void setTilePairs(int tilePairs) {
        this.tilePairs = tilePairs;
    }

    public void setSoundEnabled(boolean soundEnabled) {
        this.soundEnabled = soundEnabled;
    }

    public void setTimerEnabled(boolean timerEnabled) {
        this.timerEnabled = timerEnabled;
    }

    public void setJcbScoreEnabled(JCheckBox jcbScoreEnabled) {
        this.jcbScoreEnabled = jcbScoreEnabled;
    }

    public void setJcbSoundEnabled(JCheckBox jcbSoundEnabled) {
        this.jcbSoundEnabled = jcbSoundEnabled;
    }

    public void setJcbTimerEnabled(JCheckBox jcbTimerEnabled) {
        this.jcbTimerEnabled = jcbTimerEnabled;
    }

    public void setJlMatchPairs(JLabel jlMatchPairs) {
        this.jlMatchPairs = jlMatchPairs;
    }

    public void setJpOptionsMenu(JPanel jpOptionsMenu) {
        this.jpOptionsMenu = jpOptionsMenu;
    }

    public void setJslideMatchPairs(JSlider jslideMatchPairs) {
        this.jslideMatchPairs = jslideMatchPairs;
    }

    private int tilePairs;
    private boolean soundEnabled;
    private boolean timerEnabled;
    
    /**
     * Creates new form OptionsFrame
     */
    public OptionsFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpOptionsMenu = new javax.swing.JPanel();
        jcbSoundEnabled = new javax.swing.JCheckBox();
        jcbScoreEnabled = new javax.swing.JCheckBox();
        jslideMatchPairs = new javax.swing.JSlider();
        jlMatchPairs = new javax.swing.JLabel();
        jcbTimerEnabled = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("memory");

        jpOptionsMenu.setBorder(javax.swing.BorderFactory.createTitledBorder("options"));

        jcbSoundEnabled.setSelected(true);
        jcbSoundEnabled.setText("sound enabled");
        jcbSoundEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbSoundEnabledActionPerformed(evt);
            }
        });

        jcbScoreEnabled.setText("score enabled");
        jcbScoreEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbScoreEnabledActionPerformed(evt);
            }
        });

        jslideMatchPairs.setMajorTickSpacing(1);
        jslideMatchPairs.setMaximum(16);
        jslideMatchPairs.setMinimum(4);
        jslideMatchPairs.setPaintLabels(true);
        jslideMatchPairs.setPaintTicks(true);
        jslideMatchPairs.setSnapToTicks(true);
        jslideMatchPairs.setValue(1);
        jslideMatchPairs.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jslideMatchPairsStateChanged(evt);
            }
        });
        jslideMatchPairs.addHierarchyBoundsListener(new java.awt.event.HierarchyBoundsListener() {
            public void ancestorMoved(java.awt.event.HierarchyEvent evt) {
                jslideMatchPairsAncestorMoved(evt);
            }
            public void ancestorResized(java.awt.event.HierarchyEvent evt) {
            }
        });

        jlMatchPairs.setText("match pairs");

        jcbTimerEnabled.setText("timer enabled");
        jcbTimerEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbTimerEnabledActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpOptionsMenuLayout = new javax.swing.GroupLayout(jpOptionsMenu);
        jpOptionsMenu.setLayout(jpOptionsMenuLayout);
        jpOptionsMenuLayout.setHorizontalGroup(
            jpOptionsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOptionsMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpOptionsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jslideMatchPairs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addGroup(jpOptionsMenuLayout.createSequentialGroup()
                        .addGroup(jpOptionsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcbTimerEnabled)
                            .addComponent(jcbSoundEnabled)
                            .addComponent(jcbScoreEnabled))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpOptionsMenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlMatchPairs)
                .addGap(89, 89, 89))
        );
        jpOptionsMenuLayout.setVerticalGroup(
            jpOptionsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpOptionsMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jcbSoundEnabled)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbScoreEnabled)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbTimerEnabled)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlMatchPairs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jslideMatchPairs, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpOptionsMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpOptionsMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbSoundEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbSoundEnabledActionPerformed
        Options opt = new Options();
        opt.setSound(jcbSoundEnabled.isSelected());
    }//GEN-LAST:event_jcbSoundEnabledActionPerformed

    private void jcbScoreEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbScoreEnabledActionPerformed
        Options opt = new Options();
        opt.setScore(jcbScoreEnabled.isSelected());
    }//GEN-LAST:event_jcbScoreEnabledActionPerformed

    private void jslideMatchPairsAncestorMoved(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_jslideMatchPairsAncestorMoved
        Options opt = new Options();
        opt.setTilePairs(jslideMatchPairs.getMaximum());
    }//GEN-LAST:event_jslideMatchPairsAncestorMoved

    private void jcbTimerEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbTimerEnabledActionPerformed
        Options opt = new Options();
        if (jcbTimerEnabled.isSelected())
        {
        opt.setMatchSeconds(300);
        }
    }//GEN-LAST:event_jcbTimerEnabledActionPerformed

    private void jslideMatchPairsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jslideMatchPairsStateChanged
        Options opt = new Options();
        opt.setTilePairs(jslideMatchPairs.getValue());
        setTilePairs(jslideMatchPairs.getValue());
        //System.out.println(jslideMatchPairs.getValue());
    }//GEN-LAST:event_jslideMatchPairsStateChanged

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(OptionsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(OptionsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(OptionsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(OptionsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new OptionsFrame().setVisible(true);
//            }
//        });
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jcbScoreEnabled;
    private javax.swing.JCheckBox jcbSoundEnabled;
    private javax.swing.JCheckBox jcbTimerEnabled;
    private javax.swing.JLabel jlMatchPairs;
    private javax.swing.JPanel jpOptionsMenu;
    private javax.swing.JSlider jslideMatchPairs;
    // End of variables declaration//GEN-END:variables
}
